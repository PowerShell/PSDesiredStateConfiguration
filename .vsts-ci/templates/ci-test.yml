parameters:
  jobName: TestPkgWin
  imageName: windows-2019
  displayName: PowerShell Core on Windows
  powershellExecutable: pwsh

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.imageName }}
  displayName: ${{ parameters.displayName }}
  steps:
    - powershell: |
        $powerShellPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'powershell'
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
        ./install-powershell.ps1 -Destination $powerShellPath
        $vstsCommandString = "vso[task.setvariable variable=PATH]$powerShellPath;$env:PATH"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Install PowerShell Core

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        if (Test-Path -Path $modulePath) {
          Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
          Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
        }
        if (! (Test-Path -Path $modulePath)) {
          Write-Verbose -Verbose "Creating new temp module path: $modulePath"
          $null = New-Item -Path $modulePath -ItemType Directory
        }
      displayName: Create temporary module path

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        Write-Verbose -Verbose "Install PowerShellGet V3 to temp module path"
        Save-Module -Name PowerShellGet -Path $modulePath -MinimumVersion 3.0.0-beta10 -AllowPrerelease -Force
        Write-Verbose -Verbose "Install PlatyPS to temp module path"
        Save-Module -Name "platyPS" -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSScriptAnalyzer to temp module path"
        Save-Module -Name "PSScriptAnalyzer" -Path $modulePath -RequiredVersion 1.18.0 -Force
        Write-Verbose -Verbose "Install Pester 4.X to temp module path"
        Save-Module -Name "Pester" -MaximumVersion 4.99 -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSPackageProject to temp module path"
        Save-Module -Name PSPackageProject -Path $modulePath -Force
      displayName: Install PSPackageProject and dependencies
    
    - download: current
      artifact: Build

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        $env:PSModulePath = '$(Pipeline.Workspace)\Build' + [System.IO.Path]::PathSeparator + $env:PSModulePath
        "PSModulePath is:"| Write-Verbose -Verbose
        $env:PSModulePath | Write-Verbose -Verbose
        # check that built module is visible
        Get-Module -ListAvailable -Name PSDesiredStateConfiguration | select Name,Version,PreRelease,Path | fl | Write-Verbose -Verbose
        #
        Invoke-PSPackageProjectTest -Type Functional
      displayName: Execute functional tests
      errorActionPreference: continue

