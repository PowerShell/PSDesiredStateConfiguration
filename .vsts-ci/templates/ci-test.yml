parameters:
  jobName: TestPkgWin
  imageName: windows-2019
  displayName: PowerShell Core on Windows
  powershellExecutable: pwsh

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.imageName }}
  displayName: ${{ parameters.displayName }}
  steps:
  - ${{ parameters.powershellExecutable }}: |
      if($IsMacOs)
      {
        brew update
        brew cask install powershell-preview
        sudo ln -s -f /usr/local/microsoft/powershell/7-preview/pwsh /usr/local/bin/pwsh
      }
      elseif($IsLinux)
      {
        sudo apt-get update
        sudo apt-get install powershell-preview
        sudo ln -s /opt/microsoft/powershell/7-preview/pwsh /usr/local/bin/pwsh
      }
      elseif($IsWindows)
      {
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
        ./install-powershell.ps1 -AddToPath -Preview -Destination C:\powershell-preview
        $vstsCommandString = "vso[task.setvariable variable=PATH]C:\powershell-preview;$env:PATH"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      }
    displayName: Setup PowerShell preview

  - ${{ parameters.powershellExecutable }}: |
      $PSVersionTable
      $vstsCommandString = "vso[task.setvariable variable=PSHOME]$pshome"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: Capture PowerShellVersion

  - ${{ parameters.powershellExecutable }}: |
        dir env:PATH
    displayName: Capture Path

  - ${{ parameters.powershellExecutable }}: |
      Get-PSRepository
    displayName: Capture PSRepository

  - ${{ parameters.powershellExecutable }}: |
      Install-Module -Name "platyPS","Pester" -Force
    displayName: Install dependencies
    timeoutInMinutes: 10

  - ${{ parameters.powershellExecutable }}: |
        Install-Module -Name "PSScriptAnalyzer" -RequiredVersion 1.18.0 -Force
    displayName: Install dependencies
    timeoutInMinutes: 10

  - ${{ parameters.powershellExecutable }}: |
      Install-Module -Name PSPackageProject -Force
    displayName: Install PSPackageProject module

  - task: DownloadBuildArtifacts@0
    displayName: 'Download artifacts'
    inputs:
      buildType: current
      downloadType: specific
      itemPattern: '**/*.nupkg'
      downloadPath: '$(System.ArtifactsDirectory)'

  - ${{ parameters.powershellExecutable }}: |
      $sourceName = 'pspackageproject-local-repo'
      Register-PSRepository -Name $sourceName -SourceLocation '$(System.ArtifactsDirectory)' -ErrorAction Ignore
      $config = Get-PSPackageProjectConfiguration
      $buildOutputPath = $config.BuildOutputPath
      $null = New-Item -ItemType Directory -Path $buildOutputPath -Verbose
      $moduleName = $config.ModuleName
      Save-Module -Repository $sourceName -Name $moduleName -Path $config.BuildOutputPath
    displayName: Extract product artifact
    timeoutInMinutes: 10

  - ${{ parameters.powershellExecutable }}: |
      Invoke-PSPackageProjectTest -Type Functional
    displayName: Execute functional tests
    errorActionPreference: continue

  - ${{ parameters.powershellExecutable }}: |
      Invoke-PSPackageProjectTest -Type StaticAnalysis
    displayName: Execute static analysis tests
    errorActionPreference: continue
    condition: succeededOrFailed()


  - ${{ parameters.powershellExecutable }}: |
      Unregister-PSRepository -Name 'pspackageproject-local-repo' -ErrorAction Ignore
    displayName: Unregister temporary PSRepository
    condition: always()
    timeoutInMinutes: 10
