parameters:
  jobName: TestPkgWin
  imageName: windows-2019
  displayName: PowerShell Core on Windows
  powershellExecutable: pwsh

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.imageName }}
  displayName: ${{ parameters.displayName }}
  steps:
  - ${{ parameters.powershellExecutable }}: |
      if($IsMacOs)
      {
        brew install powershell/tap/powershell-preview
        sudo ln -s -f /usr/local/opt/powershell-preview/libexec/pwsh /usr/local/bin/pwsh
      }
      elseif($IsLinux)
      {
        sudo apt-get update
        sudo apt-get install powershell-preview
        sudo ln -s /opt/microsoft/powershell/7-preview/pwsh /usr/local/bin/pwsh
      }
      elseif($IsWindows)
      {
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
        ./install-powershell.ps1 -AddToPath -Preview -Destination C:\powershell-preview
        $vstsCommandString = "vso[task.setvariable variable=PATH]C:\powershell-preview;$env:PATH"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      }
    displayName: Setup PowerShell preview

  - ${{ parameters.powershellExecutable }}: |
      $PSVersionTable
      $vstsCommandString = "vso[task.setvariable variable=PSHOME]$pshome"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: Capture PowerShellVersion

  - ${{ parameters.powershellExecutable }}: |
        dir env:PATH
    displayName: Capture Path

  - ${{ parameters.powershellExecutable }}: |
      Get-PSRepository
    displayName: Capture PSRepository

  - ${{ parameters.powershellExecutable }}: |
      Install-module Pester -Force -MaximumVersion 4.99
    displayName: Install dependencies - Pester
    timeoutInMinutes: 10

  - ${{ parameters.powershellExecutable }}: |
      Install-Module -Name "platyPS" -Force
    displayName: Install dependencies - PlatyPS
    timeoutInMinutes: 10

  - ${{ parameters.powershellExecutable }}: |
        Install-Module -Name "PSScriptAnalyzer" -RequiredVersion 1.18.0 -Force
    displayName: Install dependencies - PSScriptAnalyzer
    timeoutInMinutes: 10

  - ${{ parameters.powershellExecutable }}: |
      Install-Module -Name PSPackageProject -Force
    displayName: Install PSPackageProject module

  - ${{ parameters.powershellExecutable }}: |
      Get-InstalledModule -Name pester  -AllVersions | Where-Object {$_.Version -ge ([version]::new(5,0,0))} | Uninstall-Module -Force
    displayName: Remove >= 5.0.0 Pester

  - ${{ parameters.powershellExecutable }}: |
      Invoke-PSPackageProjectTest -Type Functional
    displayName: Execute functional tests
    errorActionPreference: continue

