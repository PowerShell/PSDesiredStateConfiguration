name: Build-$(System.PullRequest.PullRequestNumber)-$(Date:yyyyMMdd)$(Rev:.rr)
trigger:
  # Batch merge builds together while a merge build is running
  batch: true
  branches:
    include:
    - master
pr:
  branches:
    include:
    - master

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

stages:
- stage: Build
  displayName: Build PSDesiredStateConfiguration module
  pool:
    vmImage: windows-latest
  jobs:
  - job: BuildPkg
    displayName: Build Package
    steps:
    - powershell: |
        $powerShellPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'powershell'
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
        ./install-powershell.ps1 -Destination $powerShellPath
        $vstsCommandString = "vso[task.setvariable variable=PATH]$powerShellPath;$env:PATH"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Install PowerShell Core

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet 5.9.1'
      inputs:
        checkLatest: false
        version: 5.9.1

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: sdk
        useGlobalJson: true
        includePreviewVersions: true
        workingDirectory: '$(Build.SourcesDirectory)'

    - pwsh: |
        Get-ChildItem -Path env:
      displayName: Capture environment for build
      condition: succeededOrFailed()

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        if (Test-Path -Path $modulePath) {
          Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
          Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
        }
        if (! (Test-Path -Path $modulePath)) {
          Write-Verbose -Verbose "Creating new temp module path: $modulePath"
          $null = New-Item -Path $modulePath -ItemType Directory
        }
      displayName: Create temporary module path

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        Write-Verbose -Verbose "Install PowerShellGet V3 to temp module path"
        Save-Module -Name PowerShellGet -Path $modulePath -MinimumVersion 3.0.0-beta10 -AllowPrerelease -Force
        Write-Verbose -Verbose "Install PlatyPS to temp module path"
        Save-Module -Name "platyPS" -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSScriptAnalyzer to temp module path"
        Save-Module -Name "PSScriptAnalyzer" -Path $modulePath -RequiredVersion 1.18.0 -Force
        Write-Verbose -Verbose "Install Pester 4.X to temp module path"
        Save-Module -Name "Pester" -MaximumVersion 4.99 -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSPackageProject to temp module path"
        Save-Module -Name PSPackageProject -Path $modulePath -Force
      displayName: Install PSPackageProject and dependencies

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        $modPath = Join-Path -Path $modulePath -ChildPath PSPackageProject
        Write-Verbose -Verbose "Importing PSPackageProject from: $modPath"
        Import-Module -Name $modPath -Force
        #
        $(Build.SourcesDirectory)/build.ps1 -Build -Clean
        $outBinPath = "$(Build.SourcesDirectory)\out\PSDesiredStateConfiguration"
        $vstsCommandString = "vso[task.setvariable variable=outBinPath]${outBinPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Execute build

    - publish: "$(outBinPath)"
      artifact: Build
      displayName: Publish build

- stage: Compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: Compliance_Job
    pool:
      vmImage: windows-latest
    steps:
    - checkout: self
    - checkout: ComplianceRepo
    - download: current
      artifact: Build

    - pwsh: |
        Get-ChildItem -Path "$(Pipeline.Workspace)\Build" -Recurse
      displayName: Capture downloaded artifacts
    - template: ci-compliance.yml@ComplianceRepo
      parameters:
        # component-governance
        sourceScanPath: '$(Pipeline.Workspace)\Build'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'PSDesiredStateConfiguration_20210423'
        # selections
        APIScan: false # set to false when not using Windows APIs.

- stage: Test
  displayName: Test Package
  dependsOn: Build
  jobs:
  - template: templates/ci-test.yml
    parameters:
      jobName: TestPkgWin
      displayName: PowerShell Core on Windows
      imageName: windows-latest

  - template: templates/ci-test.yml
    parameters:
      jobName: TestPkgUbuntu
      displayName: PowerShell Core on Ubuntu
      imageName: ubuntu-latest

  - template: templates/ci-test.yml
    parameters:
      jobName: TestPkgWinMacOS
      displayName: PowerShell Core on macOS
      imageName: macOS-latest
