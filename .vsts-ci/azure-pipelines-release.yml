name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

trigger: none

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

stages:
- stage: Build
  displayName: Build PSDesiredStateConfiguration module
  pool:
      name: 1ES
      demands:
      - ImageOverride -equals MMS2019
  jobs:
  - job: BuildPkg
    displayName: Build Package
    variables:
    - group: ESRP
    steps:
    - powershell: |
        $powerShellPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'powershell'
        Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
        ./install-powershell.ps1 -Preview -Destination $powerShellPath
        $vstsCommandString = "vso[task.setvariable variable=PATH]$powerShellPath;$env:PATH"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Install PowerShell Core

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'
      inputs:
        checkLatest: false
        version: 5.9.1

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: sdk
        useGlobalJson: true
        includePreviewVersions: true
        workingDirectory: '$(Build.SourcesDirectory)'

    - pwsh: |
        Get-ChildItem -Path env:
      displayName: Capture environment for build
      condition: succeededOrFailed()

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        if (Test-Path -Path $modulePath) {
          Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
          Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
        }
        if (! (Test-Path -Path $modulePath)) {
          Write-Verbose -Verbose "Creating new temp module path: $modulePath"
          $null = New-Item -Path $modulePath -ItemType Directory
        }
      displayName: Create temporary module path

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        Write-Verbose -Verbose "Install PowerShellGet V3 to temp module path"
        Save-Module -Name PowerShellGet -Path $modulePath -MinimumVersion 3.0.0-beta10 -AllowPrerelease -Force
        Write-Verbose -Verbose "Install PlatyPS to temp module path"
        Save-Module -Name "platyPS" -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSScriptAnalyzer to temp module path"
        Save-Module -Name "PSScriptAnalyzer" -Path $modulePath -RequiredVersion 1.18.0 -Force
        Write-Verbose -Verbose "Install Pester 4.X to temp module path"
        Save-Module -Name "Pester" -MaximumVersion 4.99 -Path $modulePath -Force
        Write-Verbose -Verbose "Install PSPackageProject to temp module path"
        Save-Module -Name PSPackageProject -Path $modulePath -Force
      displayName: Install PSPackageProject and dependencies

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        $modPath = Join-Path -Path $modulePath -ChildPath PSPackageProject
        Write-Verbose -Verbose "Importing PSPackageProject from: $modPath"
        Import-Module -Name $modPath -Force
        #
        $(Build.SourcesDirectory)/build.ps1 -Build -Clean
      displayName: Execute build

    - pwsh: |
        $signSrcPath = "$(Build.SourcesDirectory)\out\PSDesiredStateConfiguration"
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
        $signOutPath = "$(Build.SourcesDirectory)\signed\PSDesiredStateConfiguration"
        $null = New-Item -ItemType Directory -Path $signOutPath
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
        # Set path variable for guardian codesign validation
        $vstsCommandString = "vso[task.setvariable variable=GDN_CODESIGN_TARGETDIRECTORY]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Setup variables for signing

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        # the folder which contains the binaries to sign
        buildOutputPath: $(signSrcPath)
        # the location to put the signed output
        signOutputPath: $(signOutPath)
        # the certificate ID to use
        certificateId: "CP-230012"
        # the file pattern to use, comma separated
        pattern: '*.psm1,*.psd1'

    - pwsh: |
        $repoName = [guid]::newGuid().ToString("N")
        $packageRoot = "$(Build.SourcesDirectory)\signed\PSDesiredStateConfiguration"
        Register-PSRepository -Name $repoName -SourceLocation $packageRoot -InstallationPolicy Trusted
        Publish-Module -Path $packageRoot -Repository $repoName
        Unregister-PSRepository -Name $repoName
        Get-ChildItem -Recurse -Path $packageRoot | Write-Verbose -Verbose
        $nupkgPath = (Get-ChildItem -Recurse -Path $packageRoot -Filter "PSDesiredStateConfiguration*.nupkg" | select -First 1).FullName
        Write-Host "##vso[artifact.upload containerfolder=nupkg;artifactname=nupkg]$nupkgPath"
      displayName: Package and publish nupkg
      name: ProduceNupkg

    - publish: "$(signSrcPath)"
      artifact: Build
      displayName: Publish build

    - publish: "$(signOutPath)"
      artifact: SignedBuild
      displayName: Publish signed build

- stage: Compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: Compliance_Job
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals MMS2019
    steps:
    - checkout: self
    - checkout: ComplianceRepo
    - download: current
      artifact: SignedBuild

    - pwsh: |
        Get-ChildItem -Path "$(Pipeline.Workspace)\SignedBuild" -Recurse
      displayName: Capture downloaded artifacts
    - template: script-module-compliance.yml@ComplianceRepo
      parameters:
        # component-governance
        sourceScanPath: '$(Pipeline.Workspace)\SignedBuild'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'PSDesiredStateConfiguration_20210423'
        # selections
        APIScan: false # set to false when not using Windows APIs.

- stage: Deploy
  displayName: Publish to PowerShell gallery
  dependsOn: 
  - Build
  - Compliance
  jobs:
  - deployment: DeployPowerShellGallery
    displayName: Deploy nupkg to PowerShell Gallery
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals MMS2019
    environment: 'PSDesiredStateConfiguration-ReleaseApproval'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: 'nupkg'
          - task: NuGetToolInstaller@1
            displayName: 'Install NuGet'
            inputs:
              checkLatest: false
              version: 5.9.1
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)\nupkg\PSDesiredStateConfiguration.*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'PowerShellGallery'
